{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport let ITBem;\n\n(function (ITBem) {\n  ITBem[\"DEFAULT\"] = \"-\";\n  ITBem[\"MODIFIER\"] = \"--\";\n  ITBem[\"BLOCK\"] = \"\";\n  ITBem[\"CHILD\"] = \"_\";\n})(ITBem || (ITBem = {}));\n\nexport class BEM {\n  constructor(parent, classNames) {\n    _defineProperty(this, \"_parent\", void 0);\n\n    _defineProperty(this, \"_classNames\", void 0);\n\n    _defineProperty(this, \"_listClassNames\", []);\n\n    this._parent = parent;\n    this._classNames = classNames;\n\n    this._listClassNames.push(parent);\n  }\n\n  toString() {\n    return Object.entries(this._classNames).reduce((previousValue, currentValue) => {\n      if (currentValue[1]) {\n        if (typeof currentValue[1] == \"string\") {\n          previousValue.push(this._parent + ITBem.MODIFIER + currentValue[0] + ITBem.DEFAULT + currentValue[1]);\n        } else if (typeof currentValue[1] == \"boolean\") {\n          previousValue.push(this._parent + ITBem.MODIFIER + currentValue[0]);\n        }\n      }\n\n      return previousValue;\n    }, [...this._listClassNames]).join(\" \");\n  }\n\n  Append(className) {\n    if (!className) return this;\n\n    this._listClassNames.push(className);\n\n    return this;\n  }\n\n  Children(name, extra = \"\") {\n    return `${this._parent}__${name}${extra ? ` ${extra}` : ''}`;\n  }\n\n  Modifier(children, modifier, active, extra = \"\") {\n    let data = [`${this._parent}__${children}`];\n\n    if (active) {\n      data.push(`${this._parent}__${children}--${modifier}`);\n    }\n\n    if (extra) {\n      data.push(extra);\n    }\n\n    return data.join(\" \");\n  }\n\n  static ClassName(className, modifiers) {\n    let classNameObj = [className];\n\n    if (modifiers) {\n      classNameObj = Object.entries(modifiers).reduce((previousValue, currentValue) => {\n        currentValue[1] && previousValue.push(currentValue[0]);\n        return previousValue;\n      }, [...classNameObj]);\n    }\n\n    return classNameObj.join(\" \");\n  }\n\n}","map":{"version":3,"sources":["/Users/rafaelgonzalezmunoz/IdeaProjects/dashboard-cruds/Framework/libs/BEM.ts"],"names":["ITBem","BEM","constructor","parent","classNames","_parent","_classNames","_listClassNames","push","toString","Object","entries","reduce","previousValue","currentValue","MODIFIER","DEFAULT","join","Append","className","Children","name","extra","Modifier","children","modifier","active","data","ClassName","modifiers","classNameObj"],"mappings":"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","sourcesContent":["import { IObjectMix } from \"@app_types/types\";\n\nexport enum ITBem {\n    DEFAULT = '-',\n    MODIFIER = '--',\n    BLOCK = \"\",\n    CHILD = \"_\"\n}\n\nexport class BEM {\n    private _parent: string;\n    private _classNames: IObjectMix;\n    private _listClassNames: string[] = [];\n\n    constructor(parent: string, classNames: IObjectMix) {\n        this._parent = parent;\n        this._classNames = classNames;\n        this._listClassNames.push(parent)\n    }\n\n    toString(): string {\n        return Object.entries(this._classNames).reduce((previousValue, currentValue) => {\n            if (currentValue[1]) {\n                if (typeof currentValue[1] == \"string\") {\n                    previousValue.push(this._parent + ITBem.MODIFIER + currentValue[0] + ITBem.DEFAULT + currentValue[1]);\n                } else if (typeof currentValue[1] == \"boolean\") {\n                    previousValue.push(this._parent + ITBem.MODIFIER + currentValue[0]);\n                }\n            }\n            return previousValue;\n        }, [...this._listClassNames]).join(\" \");\n    }\n\n    Append(className: string | undefined) {\n        if (!className) return this;\n        this._listClassNames.push(className);\n        return this;\n    }\n\n    Children(name: string, extra: string = \"\"): string {\n        return `${this._parent}__${name}${extra ? ` ${extra}` : ''}`;\n    }\n\n    Modifier(children: string, modifier: string, active: boolean, extra: string = \"\") {\n        let data = [`${this._parent}__${children}`];\n\n        if (active) {\n            data.push(`${this._parent}__${children}--${modifier}`);\n        }\n        if (extra) {\n            data.push(extra);\n        }\n        return data.join(\" \");\n    }\n\n    static ClassName(className: string, modifiers?: IObjectMix) {\n        let classNameObj = [className];\n        if (modifiers) {\n            classNameObj = Object.entries(modifiers).reduce((previousValue: any, currentValue) => {\n                currentValue[1] && previousValue.push(currentValue[0]);\n                return previousValue;\n            }, [...classNameObj])\n        }\n        return classNameObj.join(\" \")\n    }\n}"]},"metadata":{},"sourceType":"module"}