{"ast":null,"code":"// @ts-ignore\n// @ts-ignore\nimport { authFailure, authInitialRq, authLogout as logout, authRequest, authSuccess } from '../actions/auth';\nimport { getApi } from 'settings';\nimport { setCookie } from '../../libs/cookie'; // @ts-ignore\n\nexport const auth = (email, password) => async dispatch => {\n  try {\n    dispatch(authRequest());\n    const res = await fetch(getApi('user/login'), {\n      body: JSON.stringify({\n        email: email,\n        password: password\n      }),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n    const response = await res.json();\n\n    if (response.error) {\n      dispatch(authFailure(response.error));\n    } else {\n      dispatch(authSuccess(response));\n    }\n  } catch (err) {\n    dispatch(authFailure('Error to change language: ', err));\n  }\n};\nexport const authRegister = data => async dispatch => {\n  try {\n    const res = await fetch(getApi('user/register'), {\n      body: JSON.stringify(data),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n    const response = await res.json();\n\n    if (response.token) {\n      dispatch(authSuccess(response));\n    }\n\n    dispatch(authSuccess(response));\n  } catch (err) {\n    dispatch(authFailure(err));\n  }\n};\nexport const authInitial = cookie => async dispatch => {\n  dispatch(authSuccess({}));\n  return;\n\n  try {\n    dispatch(authInitialRq());\n    const res = await fetch(getApi('user/initial'), {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        cookie: cookie\n      },\n      method: 'POST'\n    });\n    const response = await res.json();\n\n    if (response.error) {\n      dispatch(authFailure(response.error));\n    } else {\n      dispatch(authSuccess(response));\n    }\n  } catch (err) {\n    dispatch(authFailure(err));\n  }\n};\nexport const authLogout = () => dispatch => {\n  //const cookies = parseCookies();\n  setCookie('token', '', 0); // this will delete the cookie.\n\n  setCookie('username', '', 0); // this will delete the cookie.\n\n  setCookie('user', '', 0); // this will delete the cookie.\n  // destroyCookie(null, 'user');\n  // destroyCookie(null, 'token');\n\n  dispatch(logout());\n};","map":{"version":3,"sources":["/Users/rafaelgonzalezmunoz/IdeaProjects/dashboard-cruds/Framework/store/dispatch/auth.ts"],"names":["authFailure","authInitialRq","authLogout","logout","authRequest","authSuccess","getApi","setCookie","auth","email","password","dispatch","res","fetch","body","JSON","stringify","headers","Accept","method","response","json","error","err","authRegister","data","token","authInitial","cookie"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { takeLatest, put } from 'redux-saga/effects';\n\n// @ts-ignore\nimport { authFailure, authInitialRq, authLogout as logout, authRequest, authSuccess } from '../actions/auth';\nimport { getApi } from 'settings';\nimport { setCookie } from '../../libs/cookie';\n\n// @ts-ignore\nexport const auth = (email: string, password: string) => async (dispatch) => {\n  try {\n    dispatch(authRequest());\n    const res = await fetch(getApi('user/login'), {\n      body: JSON.stringify({\n        email: email,\n        password: password,\n      }),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    });\n    const response = await res.json();\n    if (response.error) {\n      dispatch(authFailure(response.error));\n    } else {\n      dispatch(authSuccess(response));\n    }\n  } catch (err) {\n    dispatch(authFailure('Error to change language: ', err));\n  }\n};\n\nexport const authRegister = (data) => async (dispatch) => {\n  try {\n    const res = await fetch(getApi('user/register'), {\n      body: JSON.stringify(data),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    });\n    const response = await res.json();\n    if (response.token) {\n      dispatch(authSuccess(response));\n    }\n    dispatch(authSuccess(response));\n  } catch (err) {\n    dispatch(authFailure(err));\n  }\n};\n\nexport const authInitial = (cookie) => async (dispatch) => {\n  dispatch(authSuccess({}));\n  return;\n  try {\n    dispatch(authInitialRq());\n    const res = await fetch(getApi('user/initial'), {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        cookie: cookie,\n      },\n      method: 'POST',\n    });\n    const response = await res.json();\n    if (response.error) {\n      dispatch(authFailure(response.error));\n    } else {\n      dispatch(authSuccess(response));\n    }\n  } catch (err) {\n    dispatch(authFailure(err));\n  }\n};\n\nexport const authLogout = () => (dispatch) => {\n  //const cookies = parseCookies();\n  setCookie('token', '', 0); // this will delete the cookie.\n  setCookie('username', '', 0); // this will delete the cookie.\n  setCookie('user', '', 0); // this will delete the cookie.\n  // destroyCookie(null, 'user');\n  // destroyCookie(null, 'token');\n  dispatch(logout());\n};\n"]},"metadata":{},"sourceType":"module"}